/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Landing_layoutRouteImport } from './routes/landing/__layout'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as App_layoutRouteImport } from './routes/app/__layout'
import { Route as Landing_layoutIndexRouteImport } from './routes/landing/__layout.index'
import { Route as App_layoutIndexRouteImport } from './routes/app/__layout.index'
import { Route as Landing_layoutIndexcopyRouteImport } from './routes/landing/__layout.index copy'

const LandingRouteImport = createFileRoute('/landing')()
const AppRouteImport = createFileRoute('/app')()

const LandingRoute = LandingRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Landing_layoutRoute = Landing_layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => LandingRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const App_layoutRoute = App_layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => AppRoute,
} as any)
const Landing_layoutIndexRoute = Landing_layoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => Landing_layoutRoute,
} as any)
const App_layoutIndexRoute = App_layoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => App_layoutRoute,
} as any)
const Landing_layoutIndexcopyRoute = Landing_layoutIndexcopyRouteImport.update({
  id: '/index copy',
  path: '/index copy',
  getParentRoute: () => Landing_layoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof App_layoutRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/landing': typeof Landing_layoutRouteWithChildren
  '/landing/index copy': typeof Landing_layoutIndexcopyRoute
  '/app/': typeof App_layoutIndexRoute
  '/landing/': typeof Landing_layoutIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof App_layoutIndexRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/landing': typeof Landing_layoutIndexRoute
  '/landing/index copy': typeof Landing_layoutIndexcopyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/__layout': typeof App_layoutRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/landing': typeof LandingRouteWithChildren
  '/landing/__layout': typeof Landing_layoutRouteWithChildren
  '/landing/__layout/index copy': typeof Landing_layoutIndexcopyRoute
  '/app/__layout/': typeof App_layoutIndexRoute
  '/landing/__layout/': typeof Landing_layoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/demo/tanstack-query'
    | '/landing'
    | '/landing/index copy'
    | '/app/'
    | '/landing/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/demo/tanstack-query' | '/landing' | '/landing/index copy'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/__layout'
    | '/demo/tanstack-query'
    | '/landing'
    | '/landing/__layout'
    | '/landing/__layout/index copy'
    | '/app/__layout/'
    | '/landing/__layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  LandingRoute: typeof LandingRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing/__layout': {
      id: '/landing/__layout'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof Landing_layoutRouteImport
      parentRoute: typeof LandingRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/__layout': {
      id: '/app/__layout'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof App_layoutRouteImport
      parentRoute: typeof AppRoute
    }
    '/landing/__layout/': {
      id: '/landing/__layout/'
      path: '/'
      fullPath: '/landing/'
      preLoaderRoute: typeof Landing_layoutIndexRouteImport
      parentRoute: typeof Landing_layoutRoute
    }
    '/app/__layout/': {
      id: '/app/__layout/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof App_layoutIndexRouteImport
      parentRoute: typeof App_layoutRoute
    }
    '/landing/__layout/index copy': {
      id: '/landing/__layout/index copy'
      path: '/index copy'
      fullPath: '/landing/index copy'
      preLoaderRoute: typeof Landing_layoutIndexcopyRouteImport
      parentRoute: typeof Landing_layoutRoute
    }
  }
}

interface App_layoutRouteChildren {
  App_layoutIndexRoute: typeof App_layoutIndexRoute
}

const App_layoutRouteChildren: App_layoutRouteChildren = {
  App_layoutIndexRoute: App_layoutIndexRoute,
}

const App_layoutRouteWithChildren = App_layoutRoute._addFileChildren(
  App_layoutRouteChildren,
)

interface AppRouteChildren {
  App_layoutRoute: typeof App_layoutRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  App_layoutRoute: App_layoutRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface Landing_layoutRouteChildren {
  Landing_layoutIndexcopyRoute: typeof Landing_layoutIndexcopyRoute
  Landing_layoutIndexRoute: typeof Landing_layoutIndexRoute
}

const Landing_layoutRouteChildren: Landing_layoutRouteChildren = {
  Landing_layoutIndexcopyRoute: Landing_layoutIndexcopyRoute,
  Landing_layoutIndexRoute: Landing_layoutIndexRoute,
}

const Landing_layoutRouteWithChildren = Landing_layoutRoute._addFileChildren(
  Landing_layoutRouteChildren,
)

interface LandingRouteChildren {
  Landing_layoutRoute: typeof Landing_layoutRouteWithChildren
}

const LandingRouteChildren: LandingRouteChildren = {
  Landing_layoutRoute: Landing_layoutRouteWithChildren,
}

const LandingRouteWithChildren =
  LandingRoute._addFileChildren(LandingRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  LandingRoute: LandingRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
